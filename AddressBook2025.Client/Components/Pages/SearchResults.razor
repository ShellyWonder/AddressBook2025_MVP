@*SearchResults *@
@page "/searchresults"
@attribute [Authorize]
@rendermode InteractiveAuto

@using AddressBook2025.Client.Components
@using AddressBook2025.Client.Components.BaseComponents
@using AddressBook2025.Client.Components.UIComponents.Search

@inject IContactDTOService contactService
@inject ToastService toastService
@inject NavigationManager navManager

@inherits AuthenticatedComponentBase

<PageTitle>Search Results for @SearchTerm</PageTitle>

<div class="container">
    <div class="row mt-3">
        <div class="col">
            <h1>Search Results for @SearchTerm</h1>
        </div>
        @if (HasResults)
        {
            <CreateContactBtn />
        }
    </div>
    <div class="row gy-3">
        @* Search / Filter column – render only when contacts exist *@
        @if (HasResults)
        {
            <div class="col-12 col-lg-4">
                <Search CategoryId="@CategoryId"
                        Categories="@categories"
                        OnSearch="@(newTerm => HandleSearch(newTerm))"
                        OnCategorySelected="HandleCategorySelected" />

                <!-- #region TOAST MESSAGE -->
                <div class="mt-3">
                    <ToastMessage />
                </div>
                <!-- #endregion -->
            </div>
        }
        <!-- Contacts / Empty-state column -->
        <div class="@(HasResults ? "col-12 col-lg-8" : "col-12") mb-5">

            @if (HasResults)
            {
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1">
                    @foreach (var contact in results)
                    {
                        <div class="col">
                            <ContactCard Contact="contact" OnDelete="DeleteContact" />
                        </div>
                    }
                </div>
            }
            else 
            {
                <div class="d-flex justify-content-center">

                    <div class="text-center" style="max-width:22rem;">
                        <img src="img/shrug.png" class="img-fluid" alt="Cartoon person shrugging" />
                        <p class="fs-4 mb-3 yellow no-contacts-headline ">
                            I did not find a contact named "@SearchTerm". Do you want to create a contact?
                        </p>
                        <div class="d-flex flex-column flex-sm-row gap-2 justify-content-center">

                            <NavLink class="btn btn-primary w-50 rounded-pill border border-1 btnShadow"
                                     href="/contacts/create">
                                <i class="bi bi-person-add"></i> Let&rsquo;s Create a Contact
                            </NavLink>
                            <NavLink class="btn btn-primary w-50 rounded-pill border border-1 btnShadow"
                                     href="/contacts">
                                <i class="bi bi-person-fill-x"></i> No Thanks
                            </NavLink>
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@code {
    public string? SearchTerm;

    [SupplyParameterFromQuery]
    private int? CategoryId { get; set; }

   
    private IEnumerable<ContactDTO> results = Enumerable.Empty<ContactDTO>();
    private IEnumerable<CategoryDTO> categories = Enumerable.Empty<CategoryDTO>();
    private bool HasResults => results.Any();
  
 
    protected override async Task OnParametersSetAsync()
    {

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            results = await contactService.SearchContactsAsync(SearchTerm.Trim(), UserInfo!.UserId);

        }
       
    }

    private void HandleSearch(string? newTerm)
    {
        Console.WriteLine($"[DEBUG] Search term passed to HandleSearch: '{newTerm}'");
        ///Dictionary  = key value pair -- Name, value -- gets the search term in and out of the parameter
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>
        {
                { nameof(SearchTerm), newTerm }, //receiving data from the searchInput
                { nameof(CategoryId), null } // not receiving data from the category filter
        };

        var url = navManager.GetUriWithQueryParameters("/searchresults", queryParameters);
        navManager.NavigateTo(url);
    }

    private void HandleCategorySelected()
    {

        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>
        {
             { nameof(SearchTerm), null }, //not receiving data from the searchInput
             { nameof(CategoryId), CategoryId } // receiving data from the category filter
        };

        string url = navManager.GetUriWithQueryParameters(queryParameters);
        // page navigating back to itself(page refresh with the search term), grabbing the queryParameters
        navManager.NavigateTo(url);
    }

    private void ShowToastMessage(string message) => toastService.Show(message);
    

    private async Task DeleteContact(int Id)
    {
        try
        {
            await contactService.DeleteContactAsync(Id, UserInfo!.UserId);
            results = results.Where(c => c.Id != Id);
            ShowToastMessage("Success! Contact deleted");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ShowToastMessage("Oops! Something went wrong. Try again later.");

        }
    }

}
