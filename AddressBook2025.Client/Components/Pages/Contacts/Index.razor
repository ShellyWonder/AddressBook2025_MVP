@* Contact Index *@  
@page "/contacts"
@attribute [Authorize]
@rendermode InteractiveAuto

@using AddressBook2025.Client.Components.BaseComponents
@using AddressBook2025.Client.Services

@inject ICategoryDTOService categoryService
@inject IContactDTOService contactService
@inject NavigationManager navManager
@inject IJSRuntime JS
@inject ToastService ToastService

@inherits AuthenticatedComponentBase

<PageTitle>Black Book Pro | Contacts</PageTitle>

<div class="container">
    <div class="row mt-3">
        <div class="col">
            <h1>All Contacts</h1>
        </div>
        @if (HasContacts)
        {
            <div class="col text-end">
                <NavLink class="btn btn-primary rounded pill"
                         href="/contacts/create">
                    Create New Contact
                </NavLink>
            </div>
        }

    </div>
    <div class="row gy-3">
        @* Search / Filter column – render only when contacts exist *@
        @if (HasContacts)
        {
            <div class="col-12 col-lg-4">
                <div class="mb-3 sideNav">
                    <form @onsubmit="SearchContacts">
                        <div class="input-group mb-3">
                            <InputText class="form-control border-0 rounded-2 ps-1"
                                       type="search"
                                       placeholder="Search Contacts by First, Last or Full Name"
                                       @bind-Value="searchInput" />
                            <input type="submit" class="btn btn-primary" value="Search" />
                        </div>
                    </form>
                    <div>
                        <label class="form-label mt-4">Filter by Category</label>
                      @*bind-Value captures the Id, then bind-Value:after runs the method *@
                        <InputSelect class="form-select" @bind-Value="CategoryId" @bind-Value:after="OnCategorySelected">
                            <option value="">All Categories</option>
                            @foreach (var category in categories ?? Enumerable.Empty<CategoryDTO>())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <!-- #region TOAST MESSAGE -->
                <div class="mt-3">
                        <ToastMessage />
                </div>
                <!-- #endregion -->
            </div>
        }
        <!-- Contacts / Empty-state column -->
        <div class="@(HasContacts ? "col-12 col-lg-8" : "col-12") mb-5">

            @if (HasContacts)
            {
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1">
                    @foreach (var contact in contacts!.OrderBy(c => c.LastName)
                                    .ThenBy(c => c.FirstName))
                    {
                        <div class="col">
                            <ContactCard Contact="contact" OnDelete="DeleteContact" />
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="d-flex justify-content-center">
                    <!-- Restrict the width once and let everything inside follow it -->
                    <div class="text-center" style="max-width:22rem;">
                        <!-- image -->
                        <img src="img/shrug.png"
                             class="img-fluid"
                             alt="Cartoon person shrugging" />

                        <!-- headline -->
                        <p class="fs-4 mb-3 yellow no-contacts-headline ">
                            No contacts found.
                        </p>

                        <!-- CTA button -->
                        <NavLink class="btn btn-primary w-100 rounded-pill border border-1 btnShadow"
                                 href="/contacts/create">
                            Let&rsquo;s Create a Contact
                        </NavLink>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@code {

    
    [SupplyParameterFromQuery]
    private int? CategoryId { get; set; }

    [SupplyParameterFromQuery]
    private string? SearchTerm { get; set; }

    [SupplyParameterFromQuery]
    private string? Message { get; set; }

    private IEnumerable<ContactDTO>? contacts = Array.Empty<ContactDTO>();
    private IEnumerable<CategoryDTO>? categories = Array.Empty<CategoryDTO>();

    private bool HasContacts => contacts?.Any() == true;
    private string? searchInput;
    private string? toastMessage;
    private string? messageColor;
    private Guid messageID = Guid.NewGuid();

    protected override async Task OnInitializedWithAuthAsync()
    {
        
        try
        {
            categories = await categoryService.GetCategoriesAsync(UserInfo!.UserId);
           
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        
        searchInput = SearchTerm;

        if (!string.IsNullOrEmpty(Message))
        {
            ShowToastMessage(Message);
        }

        try
        {
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                //resets any selection in category filter to null
                CategoryId = null;
                contacts = await contactService.SearchContactsAsync(SearchTerm, UserInfo!.UserId);
            }
            else if(CategoryId is not null or 0)
            {
                //resets any selection in searchInput(searchTerm) to null
                SearchTerm = null;
                contacts = await contactService.GetContactsByCategoryAsync(CategoryId!.Value, UserInfo!.UserId);
            }

            else
            {

                //Grab a list of contacts for the user
                contacts = await contactService.GetContactsAsync(UserInfo!.UserId);
            }

        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);
            ShowToastMessage("Oops! Something went wrong. Please refresh the page or try again later.");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var showToast = await JS.InvokeAsync<string>("sessionStorage.getItem", "showAddToast");
            if (showToast == "true")
            {
                ToastService.Show("Browse contacts and hit the <i class='bi bi-pencil-fill text-success'></i> to add a contact to a category.", "info");
                await JS.InvokeVoidAsync("sessionStorage.removeItem", "showAddToast");
            }
        }
    }

    private async Task DeleteContact(int Id)
    {
        try
        {
            await contactService.DeleteContactAsync(Id, UserInfo!.UserId);
            contacts = contacts?.Where(c => c.Id != Id) ?? Enumerable.Empty<ContactDTO>();
            ShowToastMessage("Success! Contact deleted");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            ShowToastMessage("Oops! Something went wrong. Try again later.");

        }
    }
    private void SearchContacts()
    {
        ///Dictionary  = key value pair -- Name, value -- gets the search term in and out of the parameter
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>
        {
                { nameof(SearchTerm), searchInput }, //receiving data from the searchInput
                { nameof(CategoryId), null } // not receiving data from the category filter
        };

        string url = navManager.GetUriWithQueryParameters(queryParameters);
        // page navigating back to itself(page refresh with the search term), grabbing the queryParameters
        navManager.NavigateTo(url);
    }

    private void OnCategorySelected()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>
        {
             { nameof(SearchTerm), null }, //not receiving data from the searchInput
             { nameof(CategoryId), CategoryId } // receiving data from the category filter
        };

        string url = navManager.GetUriWithQueryParameters(queryParameters);
        // page navigating back to itself(page refresh with the search term), grabbing the queryParameters
        navManager.NavigateTo(url);
    }


    private void ShowToastMessage(string message)
    {
        toastMessage = message;
        if (message.Contains("wrong"))
        {
            messageColor = "danger";
        }
        else
        {
            messageColor = "success";
        }
        messageID = Guid.NewGuid();
    }
}


