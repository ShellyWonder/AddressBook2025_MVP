@*ToastMessage Component *@
@using AddressBook2025.Client.Services
@implements IAsyncDisposable
@inject ToastService ToastService
@inject IJSRuntime JS

@if (!string.IsNullOrEmpty(_message))
{
    <div class="toast text-@_color-emphasis @($"bg-{_color}")"
         role="alert"
         aria-live="assertive" aria-atomic="true"
         @ref="toastElement">

        <div class="d-flex">
            <div class="toast-body flex-grow-1">
                @((MarkupString)_message)
            </div>
            <button type="button" class="btn-close m-2 mb-auto"
                    data-bs-dismiss="toast"
                    aria-label="Close">
            </button>
        </div>
    </div>
}

@code {

    //div passed into Js function
    private ElementReference toastElement;
    //imported js file
    private IJSObjectReference? toastJS;
    private string _message = "";
    // Bootstrap color for the toast's theme
    private string _color = "info";
    //allows for the toast div to show if the js fails
    private bool jsFailed = false;
    private bool _shouldShowToast = false;
    private bool _initializedJS = false;


    protected override void OnInitialized()
    {
        Console.WriteLine("[ToastMessage] Subscribing to ToastService.OnShow");
        ToastService.OnShow += ShowToast;

        // Try to play any queued toast
        var queued = ToastService.GetQueuedToast();
        if (queued is not null)
        {
            ShowToast(queued.Value.Message, queued.Value.Color);
        }
    }

    private void ShowToast(string message, string color = "info")
    {
        Console.WriteLine($"[ToastMessage] ShowToast: {message}, Color: {color}");
        _message = message;
        _color = string.IsNullOrWhiteSpace(color) ? "info" : color;

        InvokeAsync(StateHasChanged); // Triggers OnAfterRenderAsync

        _ = ClearToastAsync(); // Schedule clearing the toast
    }

    private async Task ClearToastAsync()
    {
        // Give time for the toast to display (e.g., 5 seconds)
        await Task.Delay(5000);

        _message = "";
        _color = "info";
        await InvokeAsync(StateHasChanged); // Refresh UI
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initializedJS)
        {
            try
            {
                toastJS = await JS.InvokeAsync<IJSObjectReference>("import", "/js/toastMessage.js");
                Console.WriteLine("[ToastMessage] JS module loaded");
                _initializedJS = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ToastMessage] JS import failed: {ex.Message}");
                jsFailed = true;
                return;
            }
        }

        if (!string.IsNullOrEmpty(_message) && toastJS is not null)
        {
            Console.WriteLine("[ToastMessage] Calling JS: initToast()");
            try
            {
                await toastJS.InvokeVoidAsync("initToast", toastElement);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ToastMessage] JS initToast failed: {ex.Message}");
            }
        }
    }


    // when importing a Js file, it needs to be disposed of to prevent memory issues
    public async ValueTask DisposeAsync()
    {
        //event unsubscription - component stops listening for toast notifications
        ToastService.OnShow -= ShowToast;
        if (toastJS is not null) await toastJS.DisposeAsync();

    }
}
