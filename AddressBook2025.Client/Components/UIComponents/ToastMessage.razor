@*ToastMessage Component *@
@implements IAsyncDisposable
@inject AddressBook2025.Client.Services.ToastService ToastService
@inject IJSRuntime JS

@if (!string.IsNullOrEmpty(_message))
{
    <div class="toast text-@_color-emphasis @($"bg-{_color}")"
         role="alert"
         aria-live="assertive" aria-atomic="true"
         @ref="toastElement">

        <div class="d-flex">
            <div class="toast-body flex-grow-1">
                @((MarkupString)_message)
            </div>
            <button type="button" class="btn-close m-2 mb-auto"
                    data-bs-dismiss="toast"
                    aria-label="Close">
            </button>
        </div>
    </div>
}

@code {

    //div passed into Js function
    private ElementReference toastElement;
    //imported js file
    private IJSObjectReference? toastJS;
    private string _message = "";
    // Bootstrap color for the toast's theme
    private string _color = "info";
    //allows for the toast div to show if the js fails
    private bool jsFailed = false;



    protected override async Task OnInitializedAsync()
    {
        // subscribe to the event to listen for toast notifications
        ToastService.OnShow += ShowToast;
        try
        {
            toastJS = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/UIComponents/ToastMessage.razor.js");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Toast Init Error] {ex.Message}");
            jsFailed = true;
        }
    }

    private void ShowToast(string message, string color = "info")
    {
        _ = InvokeAsync(async () =>
        {
            _message = message;
            _color = string.IsNullOrWhiteSpace(color) ? "info" : color;
            StateHasChanged();
            await Task.Delay(50); // allow render before JS call

            if (toastJS is not null)
            {
                await toastJS.InvokeVoidAsync("initToast", toastElement);
            }
            else
            {
                jsFailed = true;
            }
        });
    }

    // when importing a Js file, it needs to be disposed of to prevent memory issues
    public async ValueTask DisposeAsync()
    {
        //event unsubscription - component stops listening for toast notifications
        ToastService.OnShow -= ShowToast;
        if (toastJS is not null) await toastJS.DisposeAsync();

    }
}
