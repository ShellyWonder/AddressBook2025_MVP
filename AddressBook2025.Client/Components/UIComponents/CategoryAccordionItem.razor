@*CategoryAccordionItem *@

@if (Category is not null)
{
    <div class="accordion-item">
        <div class="accordion-header">
            @if (status == Status.Viewing)
            {
                <div class="d-lg-flex gap-3 p-3">
                    <div class="flex-grow-1 hstack gap-2 align-items-center"
                         role="button"
                         data-bs-toggle="collapse"
                         data-bs-target="#collapse-@Category.Id"
                         aria-expanded="false">
                        <span class="badge bg-secondary rounded pill sm">
                            @Category.Contacts.Count
                        </span>
                        <span>
                            @Category.Name
                        </span>
                    </div>
                    <div>
                        <div class="mt-2 mt-lg-0">
                            <span class="text-nowrap">
                                <a role="button"
                                   class="me-1"
                                   @onclick="() => status = Status.Editing">
                                    <i class="bi bi-pencil-fill" aria-label="Edit Category"></i>
                                </a>
                                <a role="button" class="me-1" @onclick="() => status = Status.Deleting">
                                    <i class="bi bi-trash-fill text-danger" aria-label="Delete Category"></i>
                                </a>
                                <a role="button" href="/contacts?categoryId=@Category.Id" class="me-1">
                                    <i class="bi bi-eye-fill" aria-label="View Category Members"></i>
                                </a>
                                <a role="button" href="@($"/categories/email/{Category.Id}")" class="me-1">
                                    <i class="bi bi-envelope-fill" aria-label="Email Category Members"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
                @*  <CategoryItemView Category="Category"
                                  OnEdit="HandleEdit"
                                  OnDelete="EnableDelete" /> *@

            }
            else if (status == Status.Editing)
            {
                <EditForm Model="Category" class="d-lg-flex gap-3 p-3" OnValidSubmit="HandleEditAsync">
                    <div class="flex-grow-1 hstack gap-2 align-items-center"
                         role="button"
                         data-bs-toggle="collapse"
                         data-bs-target="#collapse-@Category.Id"
                         aria-expanded="false">
                        <span class="badge bg-secondary rounded pill small">
                            @Category.Contacts.Count
                        </span>
                        <div class="vstack gap-2">
                            <InputText @bind-Value="Category.Name" class="form-control" />
                            <ValidationMessage For="@(() => Category.Name)" class="text-danger" />
                        </div>
                    </div>
                    <div class="m-2 mt-lg-0">
                        <span class="text-nowrap">
                            <button class="btn btn-sm btn-success me-1" type="submit">
                                <i class="bi bi-floppy-fill" aria-label="Save Changes"></i>
                                Save
                            </button>
                            <a role="button" class=" btn btn-sm btn-danger" @onclick="CancelEdit">
                                <i class="bi bi-x" aria-label="Cancel Changes"></i> Cancel
                            </a>
                        </span>
                    </div>

                </EditForm>
            }
            else if (status == Status.Deleting)
            {
                <div class="d-lg-flex gap-3 p-3">
                    <div class="flex-grow-1 hstack gap-2 align-items-center"
                         role="button"
                         data-bs-toggle="collapse"
                         data-bs-target="#collapse-@Category.Id"
                         aria-expanded="false">
                        <span class="badge bg-secondary rounded pill small">
                            @Category.Contacts.Count
                        </span>
                        <span>
                            @Category.Name
                        </span>
                    </div>
                    <div>
                        <div class="mt-2 mt-lg-0 text-danger small">
                            <i class="bi bi-exclamation-triangle-fill"></i>
                            @WarningMessage
                            <span class="text nowrap p-1">
                                <button class="btn btn-sm btn-danger" @onclick="HandleDeleteAsync">
                                    <i class="bi bi-trash"></i>
                                    Delete
                                </button>
                                <a class="btn btn-sm btn-outline-secondary" role="button" @onclick="() => status = Status.Viewing">
                                    <i class="bi bi-x"></i> Cancel
                                </a>
                            </span>
                        </div>
                        <a class="btn btn-secondary" role="button" @onclick="() => status = Status.Viewing">
                        </a>
                    </div>
                </div>
            }
        </div>
        <div id="collapse-@Category.Id" class="accordion-collapse collapse" data-bs-parent="#@ParentId">
            <div class="accordion-body">
                <CategoryContactsList Contacts="Category.Contacts" />
            </div>
        </div>
    </div>
}


@code {
    [Parameter, EditorRequired]
    public string ParentId { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public CategoryDTO? Category { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CategoryDTO> OnCategoryChange { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnCategoryDelete { get; set; }

    private enum Status
    {
        Viewing,
        Editing,
        Deleting
    }
    private Status status { get; set; } = Status.Viewing;

    private string OriginalName = string.Empty;

    private string WarningMessage => $"Are you sure you want to delete {Category!.Name}?";


    protected override void OnInitialized()
    {
        if (Category is not null) OriginalName = Category.Name!;
    }


    public async Task HandleEditAsync()
    {
        await OnCategoryChange.InvokeAsync(Category);
        status = Status.Viewing;
    }

    public async Task HandleDeleteAsync()
    {
        if (Category is not null) await OnCategoryDelete.InvokeAsync(Category.Id);

        status = Status.Viewing;
    }

    private void CancelEdit()
    {
        if (Category is not null && OriginalName != string.Empty) Category.Name = OriginalName;

        status = Status.Viewing;
    }
}