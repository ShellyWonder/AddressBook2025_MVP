@*CategoryAccordionItem *@

@if (Category is not null)
{
    <div class="accordion-item">
        <div class="accordion-header">
            @switch (status)
            {
                case Status.Viewing:
                    <CategoryAccordionView Category="Category"
                                           OnEdit="() => status = Status.Editing"
                                           OnDelete="() => status = Status.Deleting"
                                           OnToggle="ToggleExpanded"
                                           IsExpanded="isExpanded" />
                break;

                case Status.Editing:
                    <CategoryAccordionEdit Category="Category"
                                           OnSubmit="HandleEditAsync"
                                           OnCancel="() => status = Status.Viewing" />
                break;

                case Status.Deleting:
                    <CategoryAccordionDelete 
                        Category="Category" 
                        OnConfirmDelete="HandleDeleteAsync" 
                        OnCancel="() => status = Status.Viewing" />
                break;
            }

        </div>
        <div class="accordion-collapse collapse @(isExpanded ? "show" : "")" id="collapse-@Category.Id">
            <div class="accordion-body">
                <CategoryContactsList Contacts="Category.Contacts" Category="Category" />
            </div>
        </div>

    </div>
}

@code {
    [Parameter, EditorRequired]
    public string ParentId { get; set; } = string.Empty;

    [Parameter, EditorRequired]
    public CategoryDTO? Category { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CategoryDTO> OnCategoryChange { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnCategoryDelete { get; set; }

    private enum Status
    {
        Viewing,
        Editing,
        Deleting
    }
    private Status status { get; set; } = Status.Viewing;

    private string OriginalName = string.Empty;

    private string WarningMessage => $"Are you sure you want to delete {Category!.Name}?";

    private bool isExpanded = false;

    private string ExpansionStatus => isExpanded ? "show" : "";

    protected override void OnInitialized()
    {
        if (Category is not null) OriginalName = Category.Name!;
    }


    public async Task HandleEditAsync()
    {
        await OnCategoryChange.InvokeAsync(Category);
        status = Status.Viewing;
    }

    public async Task HandleDeleteAsync()
    {
        if (Category is not null) await OnCategoryDelete.InvokeAsync(Category.Id);

        status = Status.Viewing;
    }

    private void CancelEdit()
    {
        if (Category is not null && OriginalName != string.Empty) Category.Name = OriginalName;

        status = Status.Viewing;
    }


    private void ToggleExpanded()
    {
        isExpanded = !isExpanded;
    }
}